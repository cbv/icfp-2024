# Input
  A number `A` consisting of digits `1` (representing `U`), `2` (representing `L`), `3` (representing `D`) and `4` (representing `R`), at most `100` digits long.

# Output
  The number of unique positions that are visited by the Lambdaman path represented by `A`.

# Example
  * `A = 33321411`
    `Answer = 6`

-----------------------

Basic solution idea:
keep position as single bit
move it in a bitfield of the grid

moves:
P <- P / (2*R) * 2*R*R //up (1)
P <- P / (2*R) * R //left (2)
P <- P / (2*R) * 2 //down (3)
P <- P / (2*R) * 4*R //right (4)

computing or:

2^x | N

N % 2^x -- only the bits below 2^x

N / 2^x / 2 * 2 * 2^x -- only the bits above 2^x


for an 8x8 grid:
R = 2^8 = 256
2*R*R = 131072
4*R = 1024
2*R = 512

P = 2^(4*8+4)

for a 202x202 grid:
R = 2^202 = 6427752177035961102167848369364650410088811975131171341205504
2*R*R = 2^(404+1) = 82631996098781074868989413504096379978550585370535152410581099409300723904538918228148651304964410605948901503127919788032
4*R = 2^204 = 25711008708143844408671393477458601640355247900524685364822016

2*R = 2^203 = 12855504354071922204335696738729300820177623950262342682411008
want to start at:
P = 2^(101*202+101) = 104...008
but starting more to the right is probably okay:
P = 2^(24576) = 129...136

steps is 9 + 5 * (log(2) final bitmap steps)

^^ this takes too dang long!

------------

let's debug with "max path length 5"

So that means we want a 11x11 grid.

R = 2^11 = 2048

P = 2^(11*6+6) = 2^72 = 4722366482869645213696

computed as: 2^(4*4^2) * 256


With this setup, can take up to 6 steps upward (wouldn't work if starting in the leftmost column but appears to work from the center)

Let's try to optimize a bit more by using intuition about wrapping.
With a max path length of 5 can never move more than 6 columns away from the start.

. . . . . 0
. . . . . 1
. . . . . 2
. . . . . 3
. . . . . 4
0 1 2 3 4 S

So should be okay to have a 6-column grid and start at (5,5) [with column-wrapping]

R = 2^6 = 64

computed as: 64 * 1

P = 2^(6*5+5) = 2^35 = 34359738368

computed as: 2^(2*4^2) * 8

Could actually be even one more smidge narrower because there's no way to discover the wrap without stepping up or down (extra path step).

------------

Tighter math for length-100 path:

[this also doing the "smidge smaller" version]

Want a 100-column grid, starting at (100,100) [with column-wrapping]

R = 2^100 = 126...376

Computed as: 64^2^2^2*16

P = 2^(100*100+100) = 2^10100 = 252...376

Over-estimate:
2^(5*2^11) = 2^10240 = 352..776


----

Optimizing bit counting.

current routine uses 50515 steps on 2^10100, 51215 steps on 2^10240

After moving to a three-step counting routine have 30729 / 30309 steps

Moving to a [not-quite-pipelined] two-step counting routing took 40405 steps -- not an improvement!

Going to a wider (4-bit per loop) counting method gets to 25623 / 25273

Going to a 16-bit per loop version gets to 21832 / 21526 steps
