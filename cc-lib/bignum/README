BigNum is a simple wrapper for arbitrary precision arithmetic
(integers and rational numbers). It has a built-in plain C++
implementation (from https://sourceforge.net/projects/bigz/) or can
use libgmp. GMP is much faster but can be annoying to install/compile
for some projects.

This code is not a complete wrapper and not super-well tested (for
example, rounding modes might differ between the built-in and gmp
implementations); it's intended for my personal projects. One or
the other mode may lag when I add functions that are hard to do
in the other, but I try.

To use libgmp, define BIG_USE_GMP and include appropriate -I -L
-libgmp flags to the compiler. On mingw, I had to compile this myself
because cygwin only ships the dynamically-linked version (which
doesn't work for me). libgmp 6.3.0 worked out of the box, though;
I configured it like

ABI=64 CC=x86_64-w64-mingw-gcc CC_FOR_BUILD=x86_64-w64-mingw-gcc ./configure
make -j

The GMP c++ support is not required; big.h does its own wrapping.

Include big-overloads.h for custom literal support (write 12345_b) and
some operator overloads.
